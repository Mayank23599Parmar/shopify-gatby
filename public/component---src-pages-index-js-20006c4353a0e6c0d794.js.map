{"version":3,"file":"component---src-pages-index-js-20006c4353a0e6c0d794.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/components/global/Navbar.jsx","webpack://my-gatsby-site/./src/components/global/Footer.jsx","webpack://my-gatsby-site/./src/components/global/Layout.jsx","webpack://my-gatsby-site/./src/components/home/HomeBanner.jsx","webpack://my-gatsby-site/./src/components/home/HomeCategory.jsx","webpack://my-gatsby-site/./src/components/home/HomeNewAraival.jsx","webpack://my-gatsby-site/./src/utils/client.js","webpack://my-gatsby-site/./node_modules/@apollo/client/link/context/index.js","webpack://my-gatsby-site/./node_modules/graphql/jsutils/invariant.mjs","webpack://my-gatsby-site/./node_modules/graphql/language/location.mjs","webpack://my-gatsby-site/./node_modules/graphql/language/printLocation.mjs","webpack://my-gatsby-site/./node_modules/graphql/error/GraphQLError.mjs","webpack://my-gatsby-site/./node_modules/graphql/jsutils/isObjectLike.mjs","webpack://my-gatsby-site/./node_modules/graphql/error/syntaxError.mjs","webpack://my-gatsby-site/./node_modules/graphql/language/directiveLocation.mjs","webpack://my-gatsby-site/./node_modules/graphql/language/tokenKind.mjs","webpack://my-gatsby-site/./node_modules/graphql/language/lexer.mjs","webpack://my-gatsby-site/./node_modules/graphql/language/parser.mjs","webpack://my-gatsby-site/./node_modules/graphql-tag/lib/index.js","webpack://my-gatsby-site/./src/components/home/HomeBlogs.jsx","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://my-gatsby-site/./src/pages/index.js"],"sourcesContent":["import { Link} from 'gatsby'\n//import { StaticImage } from 'gatsby-plugin-image';\nimport React from 'react'\n\nexport default function Navbar() {\n  return (\n    <header className=\"py-4 shadow-sm bg-white\">\n        <div className=\"container flex items-center justify-between\">\n            <Link to='/'>\n            Logo\n            </Link>\n\n            <div className=\"w-full max-w-xl relative flex\">\n                <span className=\"absolute left-4 top-3 text-lg text-gray-400\">\n                    <i className=\"fa-solid fa-magnifying-glass\"></i>\n                </span>\n                <input type=\"text\" name=\"search\" id=\"search\"\n                    className=\"w-full border border-primary border-r-0 pl-12 py-3 pr-3 rounded-l-md focus:outline-none\"\n                    placeholder=\"search\"/>\n                <button\n                    className=\"bg-primary border border-primary text-white px-8 rounded-r-md hover:bg-transparent hover:text-primary transition\">Search</button>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n            <Link to='/' className=\"text-center text-gray-700 hover:text-primary transition relative\">\n                    <div className=\"text-2xl\">\n                        <i className=\"fa-regular fa-heart\"></i>\n                    </div>\n                    <div className=\"text-xs leading-3\">Wishlist</div>\n                    <div\n                        className=\"absolute right-0 -top-1 w-5 h-5 rounded-full flex items-center justify-center bg-primary text-white text-xs\">\n                        8</div>\n                </Link>\n                <Link to='/' className=\"text-center text-gray-700 hover:text-primary transition relative\">\n                    <div className=\"text-2xl\">\n                        <i className=\"fa-solid fa-bag-shopping\"></i>\n                    </div>\n                    <div className=\"text-xs leading-3\">Cart</div>\n                    <div\n                        className=\"absolute -right-3 -top-1 w-5 h-5 rounded-full flex items-center justify-center bg-primary text-white text-xs\">\n                        2</div>\n                </Link>\n                <Link to='/' className=\"text-center text-gray-700 hover:text-primary transition relative\">\n                    <div className=\"text-2xl\">\n                        <i className=\"fa-regular fa-user\"></i>\n                    </div>\n                    <div className=\"text-xs leading-3\">Account</div>\n                </Link>\n            </div>\n        </div>\n    </header>\n  )\n}\n ","import { Link } from 'gatsby'\nimport React from 'react'\n\nexport default function Footer() {\n  return (\n<footer className=\"bg-white rounded-lg shadow m-4 dark:bg-gray-800\">\n    <div className=\"w-full mx-auto max-w-screen-xl p-4 md:flex md:items-center md:justify-between\">\n      <span className=\"text-sm text-gray-500 sm:text-center dark:text-gray-400\">© 2023 <Link to=\"/\" className=\"hover:underline\">Flowbite™</Link>. All Rights Reserved.\n    </span>\n    <ul className=\"flex flex-wrap items-center mt-3 text-sm font-medium text-gray-500 dark:text-gray-400 sm:mt-0\">\n        <li>\n            <Link to=\"/\" activeClassName=\"active\" className=\"mr-4 hover:underline md:mr-6 \">Home</Link>\n        </li>\n        <li>\n            <Link to=\"/products\" activeClassName=\"active\" className=\"mr-4 hover:underline md:mr-6\">Product</Link>\n        </li>\n        <li>\n            <Link to=\"/about\" activeClassName=\"active\" className=\"mr-4 hover:underline md:mr-6\">About</Link>\n        </li>\n    </ul>\n    </div>\n</footer>\n\n  )\n}\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nexport default function Layout({children,pageName=\"index\"}) {\n  return (\n    <div className={`template-${pageName}`}>\n      <Navbar />\n      <main id=\"mainContent\">\n        {children}\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","import { Link } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport React from 'react'\n\nexport default function HomeBanner({homeBanner}) {\n   const {title,descriptionHtml,handle,image}=homeBanner\n   const imageData = getImage(image)\n  return (\n    <section\n    className=\"relative \">\n        <GatsbyImage image={imageData} className='py-11' alt='home Banner'/>\n    <div className=\"container absolute top-1/2 -translate-y-1/2 left-10\">\n        <h1 className=\"text-6xl text-gray-800 font-medium mb-4 capitalize w-[600px]\">\n           {title}\n        </h1>\n        <div dangerouslySetInnerHTML={{__html: descriptionHtml}}></div>\n        <div className=\"mt-12\">\n            <Link to={`/collections/${handle}`} className=\"bg-primary border border-primary text-white px-8 py-3 font-medium \n                rounded-md hover:bg-transparent hover:text-primary\">Shop Now</Link>\n        </div>\n    </div>\n</section>\n  )\n}\n","import { Link } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport React from 'react'\n\nexport default function HomeCategory({homeCategory}) {\n    const {nodes}=homeCategory\n  return (\n    <div className=\"container py-16\">\n    <h2 className=\"text-2xl font-medium text-gray-800 uppercase mb-6\">shop by category</h2>\n    <div className=\"grid grid-cols-3 gap-3\">\n        {\n            nodes.map((cv,index)=>{\n                \n                const imageData = getImage(cv.image)\n                return  <div className=\"relative rounded-sm overflow-hidden group\" key={index}>\n                <GatsbyImage image={imageData} alt=\"category 1\" className=\"w-full\"/>\n                <Link to={`/collections/${cv.handle}`}\n                    className=\"absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center text-xl text-white font-roboto font-medium group-hover:bg-opacity-60 transition\">{cv.title}\n                    </Link>\n            </div>\n            })\n        }\n    </div>\n</div>\n  )\n}\n","import { Link } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport React from 'react'\n\nexport default function HomeNewAraival({homeNewAraivals}) {\n    const {products}=homeNewAraivals;\n    console.log(products,'products')\n  return (\n    <div className=\"container pb-16\">\n    <h2 className=\"text-2xl font-medium text-gray-800 uppercase mb-6\">top new arrival</h2>\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n{\n     products.map((product,index)=>{\n      const imageData=getImage(product.featuredImage?.gatsbyImageData)\n        return   <div className=\"bg-white shadow rounded overflow-hidden group flex justify-between flex-col\" key={index}>\n        <div className=\"relative\">\n            <GatsbyImage image={imageData} alt=\"product 1\" className=\"w-full\"/>\n            <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-center \n            justify-center gap-2 opacity-0 group-hover:opacity-100 transition\">\n                <Link to={``}\n                    className=\"text-white text-lg w-9 h-8 rounded-full bg-primary flex items-center justify-center hover:bg-gray-800 transition\"\n                    title=\"view product\">\n                    <i className=\"fa-solid fa-magnifying-glass\"></i>\n                </Link>\n                <Link to={``}\n                    className=\"text-white text-lg w-9 h-8 rounded-full bg-primary flex items-center justify-center hover:bg-gray-800 transition\"\n                    title=\"add to wishlist\">\n                    <i className=\"fa-solid fa-heart\"></i>\n                </Link>\n            </div>\n        </div>\n        <div className=\"pt-4 pb-3 px-4\">\n            <Link to={``}>\n                <h4 className=\"uppercase font-medium text-xl mb-2 text-gray-800 hover:text-primary transition\">{product.title}</h4>\n            </Link>\n            <div className=\"flex items-baseline mb-1 space-x-2\">\n                <p className=\"text-xl text-primary font-semibold\">$45.00</p>\n                <p className=\"text-sm text-gray-400 line-through\">$55.90</p>\n            </div>\n            <div className=\"flex items-center\">\n                <div className=\"flex gap-1 text-sm text-yellow-400\">\n                    <span><i className=\"fa-solid fa-star\"></i></span>\n                    <span><i className=\"fa-solid fa-star\"></i></span>\n                    <span><i className=\"fa-solid fa-star\"></i></span>\n                    <span><i className=\"fa-solid fa-star\"></i></span>\n                    <span><i className=\"fa-solid fa-star\"></i></span>\n                </div>\n                <div className=\"text-xs text-gray-500 ml-3\">(150)</div>\n            </div>\n        </div>\n        <Link to={``}\n            className=\"block w-full py-1 text-center text-white bg-primary border border-primary rounded-b hover:bg-transparent hover:text-primary transition\">Add\n            to cart</Link>\n    </div>\n    })\n}\n     \n        \n    </div>\n</div>\n  )\n}\n","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from \"@apollo/client/link/context\";\nconst httpLink = createHttpLink({ uri:  \"https://e2m-testing-store.myshopify.com/api/2023-04/graphql.json\"  })\n\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token': process.env.GATSBY_STOREFRONT_ACCESS_TOKEN\n  }\n}))\n\nexport const client = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache: new InMemoryCache(),\n})","import { __rest } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nexport function setContext(setter) {\n    return new ApolloLink(function (operation, forward) {\n        var request = __rest(operation, []);\n        return new Observable(function (observer) {\n            var handle;\n            var closed = false;\n            Promise.resolve(request)\n                .then(function (req) { return setter(req, operation.getContext()); })\n                .then(operation.setContext)\n                .then(function () {\n                if (closed)\n                    return;\n                handle = forward(operation).subscribe({\n                    next: observer.next.bind(observer),\n                    error: observer.error.bind(observer),\n                    complete: observer.complete.bind(observer),\n                });\n            })\n                .catch(observer.error.bind(observer));\n            return function () {\n                closed = true;\n                if (handle)\n                    handle.unsubscribe();\n            };\n        });\n    });\n}\n//# sourceMappingURL=index.js.map","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","\nimport React, { useEffect, useState } from 'react'\nimport { client } from '../../utils/client';\nimport { gql } from '@apollo/client';\n\nexport default function HomeBlogs() {\n  const[data,setData]  =useState([])\n  useEffect(()=>{\n    client.query({\n      query:gql`query{\n        blogs(first: 100) {\n          nodes {\n            handle\n            id\n            onlineStoreUrl\n            seo {\n              description\n              title\n            }\n            title\n            articles(first: 100) {\n              nodes {\n                handle\n                image {\n                  altText\n                  height\n                  id\n                  url\n                  width\n                }\n                title\n                excerptHtml\n                excerpt\n                content\n           contentHtml\n           publishedAt\n           authorV2 {\n            name\n          }\n              }\n            }\n          }\n        }\n      }`\n    }).then(response => {\n      setData(response)\n      console.log(response,\"wdwdddwd\");\n    });\n  },[])\n  console.log(data,\"ddddddddddd\")\n  return (\n    <div className='test-test'>{\n      data?.data?.blogs?.nodes?.map((blog,inex)=>{\n        return <h1>{blog.title}</h1>\n      })\n    }</div>\n  )\n}\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}","import * as React from \"react\";\nimport Layout from \"../components/global/Layout\";\nimport { graphql } from \"gatsby\";\nimport HomeBanner from \"../components/home/HomeBanner\";\nimport HomeCategory from \"../components/home/HomeCategory\";\nimport HomeNewAraival from \"../components/home/HomeNewAraival\";\nimport HomeBlogs from \"../components/home/HomeBlogs\";\n\nconst IndexPage = (data) => {\n  console.log(data,\"dwdwed\")\n  // home banner data\n  const {homeBanner,homeCategory,homeNewAraivals}=data.data\n  return (\n    <Layout pageName=\"index\">\n      {/* home banner Data  */}\n      <HomeBanner homeBanner={homeBanner}/>\n      {/* home category sectionn */}\n      <HomeCategory homeCategory={homeCategory}/> \n      {/* home new araivals */}\n      <HomeNewAraival homeNewAraivals={homeNewAraivals}/>\n      {/* home blog section  */}\n      <HomeBlogs/>\n    </Layout>\n  ); \n};\n\nexport default IndexPage;\n\nexport const Head = () => <title>Home page</title>;\nexport const myQuery = graphql`\n  query SiteQuery {\n  homeBanner:shopifyCollection(handle: {eq: \"frontpage\"}) {\n    handle\n    description\n    descriptionHtml\n    image {\n      gatsbyImageData\n      altText\n      src\n    }\n    title\n  }\n  homeCategory:allShopifyCollection(limit: 10) {\n    nodes {\n      title\n      handle\n      image {\n        gatsbyImageData\n      }\n    }\n  }\n  homeNewAraivals:  shopifyCollection(handle: {eq: \"bundle\"}) {\n    products {\n      featuredImage {\n        altText\n        gatsbyImageData\n      }\n      description\n      handle\n      id\n      priceRange {\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n      productType\n      title\n      variants {\n        _product\n        availableForSale\n        barcode\n        id\n        image {\n          gatsbyImageData\n        }\n        price\n      }\n    }\n  }\n   markdownData: allMarkdownRemark {\n      nodes {\n        frontmatter {\n          slug\n          stack\n          title\n        }\n        id\n      }\n    }\n     site {\n      siteMetadata {\n        siteUrl\n        title\n        description\n      }\n    }\n    sitePlugin {\n      pluginOptions\n      pluginFilepath\n      ssrAPIs\n      resolve\n    }\n  }\n\n\n\n`;\n"],"names":["Navbar","className","to","type","name","id","placeholder","Footer","activeClassName","Layout","children","pageName","HomeBanner","homeBanner","title","descriptionHtml","handle","image","imageData","getImage","G","alt","dangerouslySetInnerHTML","__html","HomeCategory","homeCategory","nodes","map","cv","index","key","HomeNewAraival","homeNewAraivals","products","console","log","product","featuredImage","gatsbyImageData","httpLink","createHttpLink","uri","middlewareLink","setter","headers","process","ApolloLink","operation","forward","request","observer","closed","Promise","resolve","then","req","getContext","setContext","subscribe","next","bind","error","complete","catch","unsubscribe","client","ApolloClient","link","concat","cache","InMemoryCache","invariant","condition","message","Boolean","Error","LineRegExp","getLocation","source","position","lastLineStart","line","match","body","matchAll","length","column","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","push","slice","printPrefixedLines","subLine","existingLines","filter","_","undefined","padLen","max","prefix","join","GraphQLError","constructor","rawArgs","_this$nodes","_nodeLocations$","_ref","positions","path","originalError","extensions","args","firstArg","toNormalizedOptions","super","this","undefinedIfEmpty","Array","isArray","nodeLocations","node","loc","start","locations","pos","originalExtensions","value","Object","create","defineProperties","writable","enumerable","stack","defineProperty","configurable","captureStackTrace","toStringTag","Symbol","toString","output","location","toJSON","formattedError","keys","array","syntaxError","description","DirectiveLocation","TokenKind","Lexer","startOfFileToken","SOF","lastToken","token","lineStart","advance","lookahead","kind","EOF","nextToken","readNextToken","end","prev","COMMENT","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","charCodeAt","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","char","String","fromCodePoint","toUpperCase","createToken","col","bodyLength","readComment","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","readBlockString","readString","readNumber","readName","firstCode","isFloat","readDigits","FLOAT","INT","chunkStart","STRING","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","size","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","BLOCK_STRING","NAME","Parser","options","sourceObj","_lexer","_options","_tokenCounter","parseName","expectToken","parseDocument","DOCUMENT","definitions","many","parseDefinition","peek","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","QUERY","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","parseVariableDefinition","VARIABLE_DEFINITION","variable","parseVariable","parseTypeReference","defaultValue","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","VARIABLE","SELECTION_SET","selections","parseSelection","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","parseList","parseObject","advanceLexer","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","OBJECT","fields","parseObjectField","OBJECT_FIELD","parseDirective","DIRECTIVE","innerType","LIST_TYPE","NON_NULL_TYPE","NAMED_TYPE","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","parseFieldDefinition","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","prototype","hasOwnProperty","call","startToken","noLocation","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","maxTokens","isPunctuatorTokenKind","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","processFragments","ast","seenKeys","Set","forEach","fragmentDefinition","fragmentName","sourceKey","substring","sourceKeySet","get","has","warn","set","add","cacheKey","parsed","parse","doc","workSet","endToken","stripLoc","gql","literals","_i","result","arg","gql_1","extras","clear","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","HomeBlogs","data","setData","useState","useEffect","strings","raw","query","response","blogs","blog","inex","Head"],"sourceRoot":""}